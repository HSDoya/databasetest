#include <stdio.h>
#include <stdlib.h>

typedef unsigned char BYTE;

// 초기 치환 테이블 (IP)
int ip_table[8] = {
    5, 1, 3, 2, 4, 8, 6, 7
};

// 확대 치환 테이블 (E)
int e_table[48] = {
    2,  3,  4,  5,  4,  5,  6,  7,
    6,  7,  8,  9,  8,  9, 10, 11,
    10, 11, 12, 13, 12, 13, 14, 15,
    14, 15, 16, 17, 16, 17, 18, 19,
    18, 19, 20, 21, 20, 21, 22, 23,
    22, 23, 24, 25, 24, 25, 26, 27
};

// S-box 테이블
int s_box[4][16] = {
    {14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7},
    { 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8},
    { 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0},
    {15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13}
};

// 키 값
int key[6] = {1, 1, 0, 0, 0, 1}; // 110001

// 초기 치환 함수
BYTE initial_permutation(BYTE block) {
    BYTE result = 0;
    int i;
    for (i = 0; i < 8; i++) {
        int bit = (block >> (8 - ip_table[i])) & 1;
        result |= (bit << (7 - i));
    }
    return result;
}

// 확대 치환 함수
BYTE expansion_permutation(BYTE block) {
    BYTE result = 0;
    int i;
    for (i = 0; i < 48; i++) {
        int bit = (block >> (8 - e_table[i])) & 1;
        result |= (bit << (47 - i));
    }
    return result;
}

// S-box 치환 함수
BYTE s_box_substitution(BYTE block) {
    int row = ((block & 0x20) >> 4) | (block & 0x01);
    int col = (block >> 1) & 0x0F;
    return s_box[row][col];
}

int main() {
    BYTE plaintext = 0xC2; // 'MC'
    BYTE cipher = 0;
    BYTE expanded;

    // 초기 치환
    plaintext = initial_permutation(plaintext);
    
    // 하위 4비트와 상위 4비트 분리
    BYTE upper = (plaintext >> 4) & 0x0F;
    BYTE lower = plaintext & 0x0F;
    
    // R 확대치환
    expanded = expansion_permutation(lower);
    
    // R과 K의 XOR 연산
    expanded ^= key[0];
    
    // S-box 치환
    lower = s_box_substitution(expanded);
    
    // 암호문 생성
    cipher = (upper << 4) | lower;

    // 출력
    printf("Cipher (Hex): 0x%02X\n", cipher);
    printf("Cipher (Decimal): %d\n", cipher);
    printf("Cipher (Character): %c\n", cipher);

    return 0;
}
